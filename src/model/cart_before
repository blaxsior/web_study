import { readFile, writeFile } from 'fs/promises';
import { join } from 'path';
import { ICart } from '../Interface/ICart.interface';

const p = join(
  'data',
  'cart.json'
);

export class Cart {
  static async addProduct(id: string, productPrice: number) {
    // Fetch the previous cart
    let cart: ICart = { products: [], totalPrice: 0 };
    try {
      const fileContent = await readFile(p);
      cart = JSON.parse(fileContent.toString('utf8'));
      // Analyze the cart => Find existing product
      const existingProductIndex = cart.products.findIndex(
        prod => prod.id === id
      );
      const existingProduct = cart.products[existingProductIndex];
      let updatedProduct;
      // Add new product/ increase quantity
      if (existingProduct) {
        updatedProduct = { ...existingProduct };
        updatedProduct.qty = updatedProduct.qty + 1;
        cart.products = [...cart.products];
        cart.products[existingProductIndex] = updatedProduct;
      } else {
        updatedProduct = { id: id, qty: 1 };
        cart.products = [...cart.products, updatedProduct];
      }
      cart.totalPrice = cart.totalPrice + +productPrice;

      await writeFile(p, JSON.stringify(cart));
    }
    catch (err) {
      console.log(err);
    }
  }

  static async deleteProduct(id: string, productPrice: number) {
    try {
      const fileContent = await readFile(p);

      const updatedCart: ICart = JSON.parse(fileContent.toString('utf-8'));
      const product = updatedCart.products.find(prod => prod.id === id);
      if (!product) {
        return;
      }

      const productQty = product.qty;
      updatedCart.products = updatedCart.products.filter(
        prod => prod.id !== id
      );
      updatedCart.totalPrice =
        updatedCart.totalPrice - productPrice * productQty;

      await writeFile(p, JSON.stringify(updatedCart));
    }
    catch (err) {
      console.log(err);
      return;
    }
  }

  static async getCart() {
    let cart: ICart = { products: [], totalPrice: 0 };
    try {
      const fileContent = await readFile(p);
      cart = JSON.parse(fileContent.toString('utf8'));
    }
    catch (err) {
      console.log(err);
    }
    return cart;
  }
};
